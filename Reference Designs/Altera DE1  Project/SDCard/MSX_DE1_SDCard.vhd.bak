library ieee ;
use ieee.std_logic_1164.all;
use IEEE.std_logic_unsigned.all;

Entity MSX_DE1_SDMapperV2 is
port (
	CLOCK_24:	  	in std_logic_vector(1 downto 0);		-- 24 MHz
	CLOCK_27:		in std_logic_vector(1 downto 0);		--	27 MHz
	CLOCK_50:		in std_logic;								--	50 MHz
	EXT_CLOCK:		in std_logic;								--	External Clock
						
	KEY:				in std_logic_vector(3 downto 0);		--	Pushbutton[3:0]
						
	SW:				in std_logic_vector(9 downto 0);		--	Toggle Switch[9:0]
						
	HEX0:				out std_logic_vector(6 downto 0);	--	Seven Segment Digit 0
	HEX1:				out std_logic_vector(6 downto 0);	--	Seven Segment Digit 1
	HEX2:				out std_logic_vector(6 downto 0);	--	Seven Segment Digit 2
	HEX3:				out std_logic_vector(6 downto 0);	--	Seven Segment Digit 3
						
	LEDG:				out std_logic_vector(7 downto 0);	--	LED Green[7:0]
	LEDR:				out std_logic_vector(9 downto 0);	--	LED Red[9:0]
						
	UART_TXD:		out std_logic;								--	UART Transmitter
	UART_RXD:		in std_logic;								--	UART Receiver
						
	DRAM_DQ:			inout std_logic_vector(15 downto 0);--	SDRAM Data bus 16 Bits
	DRAM_ADDR:		out std_logic_vector(11 downto 0);	--	SDRAM Address bus 12 Bits
	DRAM_LDQM:		out std_logic;								--	SDRAM Low-byte Data Mask 
	DRAM_UDQM:		out std_logic;								--	SDRAM High-byte Data Mask
	DRAM_WE_N:		out std_logic;								--	SDRAM Write Enable
	DRAM_CAS_N:		out std_logic;								--	SDRAM Column Address Strobe
	DRAM_RAS_N:		out std_logic;								--	SDRAM Row Address Strobe
	DRAM_CS_N:		out std_logic;								--	SDRAM Chip Select
	DRAM_BA_0:		out std_logic;								--	SDRAM Bank Address 0
	DRAM_BA_1:		out std_logic;								--	SDRAM Bank Address 0
	DRAM_CLK:		out std_logic;								--	SDRAM Clock
	DRAM_CKE:		out std_logic;								--	SDRAM Clock Enable
						
	FL_DQ:			inout std_logic_vector(7 downto 0);	--	FLASH Data bus 8 Bits
	FL_ADDR:			out std_logic_vector(21 downto 0);	--	FLASH Address bus 22 Bits
	FL_WE_N:			out std_logic;								--	FLASH Write Enable
	FL_RST_N:		out std_logic;								--	FLASH Reset
	FL_OE_N:			out std_logic;								--	FLASH Output Enable
	FL_CE_N:			out std_logic;								--	FLASH Chip Enable
						
	SRAM_DQ:		inout std_logic_vector(15 downto 0);--	SRAM Data bus 16 Bits
	SRAM_ADDR:		out std_logic_vector(17 downto 0);	--	SRAM Address bus 18 Bits
	SRAM_UB_N:		out std_logic;								--	SRAM High-byte Data Mask 
	SRAM_LB_N:		out std_logic;								--	SRAM Low-byte Data Mask 
	SRAM_WE_N:		out std_logic;								--	SRAM Write Enable
	SRAM_CE_N:		out std_logic;								--	SRAM Chip Enable
	SRAM_OE_N:		out std_logic;								--	SRAM Output Enable
								
	SD_DAT:			inout std_logic;							--	SD Card Data
	SD_DAT3:			inout std_logic;							--	SD Card Data 3
	SD_CMD:			inout std_logic;							--	SD Card Command Signal
	SD_CLK:			out std_logic;								--	SD Card Clock
								
	I2C_SDAT:		inout std_logic;							--	I2C Data
	I2C_SCLK:		out std_logic;								--	I2C Clock
								
	PS2_DAT:			in std_logic;		 						--	PS2 Data
	PS2_CLK:			in std_logic;								--	PS2 Clock
								
	TDI:				in std_logic;  							-- CPLD -> FPGA (data in)
	TCK:				in std_logic;  							-- CPLD -> FPGA (clk)
	TCS:				in std_logic;  							-- CPLD -> FPGA (CS)
	TDO:				out std_logic; 							-- FPGA -> CPLD (data out)
								
	VGA_HS:			out std_logic;								--	VGA H_SYNC
	VGA_VS:			out std_logic;								--	VGA V_SYNC
	VGA_R:   		out std_logic_vector(3 downto 0);	--	VGA Red[3:0]
	VGA_G:	 		out std_logic_vector(3 downto 0);	--	VGA Green[3:0]
	VGA_B:   		out std_logic_vector(3 downto 0);	--	VGA Blue[3:0]
						
	AUD_ADCLRCK:	inout std_logic;							--	Audio CODEC ADC LR Clock
	AUD_ADCDAT:		in std_logic;								--	Audio CODEC ADC Data
	AUD_DACLRCK:	inout std_logic;							--	Audio CODEC DAC LR Clock
	AUD_DACDAT:		out std_logic;								--	Audio CODEC DAC Data
	AUD_BCLK:		inout std_logic;							--	Audio CODEC Bit-Stream Clock
	AUD_XCK:			out std_logic;								--	Audio CODEC Chip Clock
						
	GPIO_0:			inout std_logic_vector(35 downto 0);--	GPIO Connection 0
	
	-- MSX Bus
	A:					in std_logic_vector(15 downto 0);
	D:					inout std_logic_vector(7 downto 0);
	RD_n:				in std_logic;
	WR_n:				in std_logic;
	MREQ_n:			in std_logic;
	IORQ_n:			in std_logic;
	SLTSL_n:			in std_logic;
	CS1_n:			in std_logic;
	CS2_n:			in std_logic;
	BUSDIR_n:		out std_logic;
	M1_n:				in std_logic;
	INT_n:			out std_logic;
	MSX_CLK:			in std_logic;
	WAIT_n:			out std_logic); 
end MSX_DE1_SDMapperV2;

architecture behavioral of MSX_DE1_SDMapperV2 is

	component decoder_7seg
	port (
		NUMBER		: in   std_logic_vector(3 downto 0);
		HEX_DISP	: out  std_logic_vector(6 downto 0));
	end component;

	signal HEXDIGIT0		: std_logic_vector(3 downto 0);
	signal HEXDIGIT1		: std_logic_vector(3 downto 0);
	signal HEXDIGIT2		: std_logic_vector(3 downto 0);
	signal HEXDIGIT3		: std_logic_vector(3 downto 0);
	
	signal io_cs	  		: std_logic;
	signal iomapper_s		: std_logic;
	signal ffff				: std_logic;
	signal sltsl_c			: std_logic;
	signal slt_exp_n		: std_logic_vector(3 downto 0);
	signal sltsl_rom_n_s	: std_logic;
	signal sltsl_ram_n_s	: std_logic;
	signal wait_n_s		: std_logic;
	signal reset_n_i		: std_logic;
	
	-- Regs
	signal regs_cs_s		: std_logic;

	-- SPI port
	signal spi_cs_s		: std_logic;
	signal sd_chg_q		: std_logic_vector(1 downto 0);
	signal sd_chg_s		: std_logic_vector(1 downto 0);
	signal status_s		: std_logic_vector(7 downto 0);
	signal spi_ctrl_wr_s	: std_logic;
	signal spi_ctrl_rd_s	: std_logic;
	signal sd_sel_q		: std_logic_vector(1 downto 0);

	-- Flash ASCII16
	signal rom_bank_wr_s	: std_logic;
	signal rom_bank1_q	: std_logic_vector(2 downto 0);
	signal rom_bank2_q	: std_logic_vector(3 downto 0);

	-- Timer
	signal tmr_cnt_q		: std_logic_vector(15 downto 0);	-- clock 25MHz: decrement each 40ns
	signal tmr_wr_s		: std_logic;
	signal tmr_rd_s		: std_logic;
	signal ram_a_o			: std_logic_vector(18 downto 13);
	
begin

	-- Display the current Memory Address in the 7 segment display
	HEXDIGIT0 <= D(3 downto 0);
	HEXDIGIT1 <= D(7 downto 4);
	HEXDIGIT2 <= A(11 downto 8);
	HEXDIGIT3 <= A(15 downto 12);
	LEDR(9 downto 0) <= iomapper_s & sltsl_c & io_cs & "000" & slt_exp_n;
	
	WAIT_n	<= 'Z'; --	when wait_n_s = '1'	else '0';
	
	-- Signals assignment for DE1 port
	-- Switch SRAM banks between lower/upper banks (SRAM is a 16 bit data bus)
	SRAM_UB_N <= not ram_a_o(18);						
	SRAM_LB_N <= ram_a_o(18);		
	SRAM_ADDR <= ram_a_o & A(11 downto 0);
	SRAM_OE_N <= '0';
	
	reset_n_i <= KEY(0);						-- Reset is KEY0

	-- Glue Logic
	-- Enable portas I/O
	io_cs			<= not IORQ_n and M1_n and SW(9);

	-- Slot expander address select
	ffff    <= '1' when A = X"FFFF" else '0';

	-- Slot Selects
	sltsl_c			<= SLTSL_n    when SW(9) = '1' else '1';
	sltsl_ram_n_s	<= sltsl_c; --slt_exp_n(0) when SW(9) = '1' else '1';
	
	iomapper_s	<= '1' when io_cs = '1' and A(7 downto 2) = "111111" else '0';	-- Acesso I/O portas $FC a $FF

		DISPHEX0 : decoder_7seg PORT MAP (
			NUMBER		=>	HEXDIGIT0,
			HEX_DISP		=>	HEX0
		);		
	
	DISPHEX1 : decoder_7seg PORT MAP (
			NUMBER		=>	HEXDIGIT1,
			HEX_DISP		=>	HEX1
		);		
	
	DISPHEX2 : decoder_7seg PORT MAP (
			NUMBER		=>	HEXDIGIT2,
			HEX_DISP		=>	HEX2
		);		
	
	DISPHEX3 : decoder_7seg PORT MAP (
			NUMBER		=>	HEXDIGIT3,
			HEX_DISP		=>	HEX3
		);


	-- Expansor de slot
	exp: entity work.exp_slot
	port map (
		reset_n		=> reset_n_i,
		sltsl_n		=> sltsl_c,
		cpu_rd_n		=> RD_n,
		cpu_wr_n		=> WR_n,
		ffff			=> ffff,
		cpu_a			=> A(15 downto 14),
		cpu_d			=> D,
		exp_n			=> slt_exp_n
	);

	entity work.sd_controller
	port map (
	cs : out std_logic;				-- To SD card
	mosi : out std_logic;			-- To SD card
	miso : in std_logic;			-- From SD card
	sclk : out std_logic;			-- To SD card
	card_present : in std_logic;	-- From socket - can be fixed to '1' if no switch is present
	card_write_prot : in std_logic;	-- From socket - can be fixed to '0' if no switch is present, or '1' to make a Read-Only interface

	rd : in std_logic;				-- Trigger single block read
	rd_multiple : in std_logic;		-- Trigger multiple block read
	dout : out std_logic_vector(7 downto 0);	-- Data from SD card
	dout_avail : out std_logic;		-- Set when dout is valid
	dout_taken : in std_logic;		-- Acknowledgement for dout
	
	wr : in std_logic;				-- Trigger single block write
	wr_multiple : in std_logic;		-- Trigger multiple block write
	din : in std_logic_vector(7 downto 0);	-- Data to SD card
	din_valid : in std_logic;		-- Set when din is valid
	din_taken : out std_logic;		-- Ackowledgement for din
	
	addr : in std_logic_vector(31 downto 0);	-- Block address
	erase_count : in std_logic_vector(7 downto 0); -- For wr_multiple only

	sd_error : out std_logic;		-- '1' if an error occurs, reset on next RD or WR
	sd_busy : out std_logic;		-- '0' if a RD or WR can be accepted
	sd_error_code : out std_logic_vector(2 downto 0); -- See above, 000=No error
	
	
	reset : in std_logic;	-- System reset
	clk : in std_logic;		-- twice the SPI clk (max 50MHz)
	
	-- Optional debug outputs
	sd_type : out std_logic_vector(1 downto 0);	-- Card status (see above)
	sd_fsm : out std_logic_vector(7 downto 0) := "11111111" -- FSM state (see block at end of file)
);


end behavioral;
