library ieee ;
use ieee.std_logic_1164.all; 

Entity DE0_Top is
port (
CLOCK_50:		in std_logic;		--	50 MHz
CLOCK_50_2:		in std_logic;								--	50 MHz
                
KEY:			in std_logic_vector(2 downto 0);		--	Pushbutton[3:0]             
SW:			in std_logic_vector(9 downto 0);		--	Toggle Switch[9:0]
                
HEX0:			out std_logic_vector(6 downto 0);		--	Seven Segment Digit 0
HEX1:			out std_logic_vector(6 downto 0);		--	Seven Segment Digit 1
HEX2:			out std_logic_vector(6 downto 0);		--	Seven Segment Digit 2
HEX3:			out std_logic_vector(6 downto 0);		--	Seven Segment Digit 3
HEX0_DP:		out std_logic;
HEX1_DP:		out std_logic;	
HEX2_DP:		out std_logic;	
HEX3_DP:		out std_logic;	
                
LEDG:			out std_logic_vector(9 downto 0);		--	LED Green[7:0]
                
UART_TXD:		out std_logic;							--	UART Transmitter
UART_RXD:		in std_logic;							--	UART Receiver
UART_CTS:		out std_logic;							--	UART Clear To Send
UART_RTS:		in std_logic;							--	UART Request To Send
             
DRAM_DQ:		inout std_logic_vector(15 downto 0);	--	SDRAM Data bus 16 Bits
DRAM_ADDR:		out std_logic_vector(12 downto 0);		--	SDRAM Address bus 13 Bits
DRAM_LDQM:		out std_logic;							--	SDRAM Low-byte Data Mask 
DRAM_UDQM:		out std_logic;							--	SDRAM High-byte Data Mask
DRAM_WE_N:		out std_logic;							--	SDRAM Write Enable
DRAM_CAS_N:		out std_logic;							--	SDRAM Column Address Strobe
DRAM_RAS_N:		out std_logic;							--	SDRAM Row Address Strobe
DRAM_CS_N:		out std_logic;							--	SDRAM Chip Select
DRAM_BA_0:		out std_logic;							--	SDRAM Bank Address 0
DRAM_BA_1:		out std_logic;							--	SDRAM Bank Address 0
DRAM_CLK:		out std_logic;							--	SDRAM Clock
DRAM_CKE:		out std_logic;							--	SDRAM Clock Enable
														
FL_DQ:			inout std_logic_vector(14 downto 0);	--	FLASH Data bus 15 Bits
FL_DQ15_AM1:	inout std_logic;						--	FLASH Data bus Bit 15 or Address A-1
FL_ADDR:		out std_logic_vector(21 downto 0);		--	FLASH Address bus 22 Bits
FL_WE_N:		out std_logic;							--	FLASH Write Enable
FL_RST_N:		out std_logic;							--	FLASH Reset
FL_OE_N:		out std_logic;							--	FLASH Output Enable
FL_CE_N:		out std_logic;							--	FLASH Chip Enable
FL_WP_N:		out std_logic;							--	FLASH Hardware Write Protect
FL_BYTE_N:		out std_logic;							--	FLASH Selects 8/16-bit mode
FL_RY:			in std_logic;							--	FLASH Ready/Busy
   
LCD_DATA:		inout std_logic_vector(7 downto 0);		-- LCD Data bus 8 bits
LCD_BLON:		out std_logic;							-- LCD Back Light ON/OFF
LCD_RW:			out std_logic;							-- CD Read/Write Select, 0 = Write, 1 = Read
LCD_EN:			out std_logic;							-- LCD Enable
LCD_RS:			out std_logic;							-- LCD Command/Data Select, 0 = Command, 1 = Data
														
SD_DAT:			inout std_logic;						--	SD Card Data
SD_DAT3:		inout std_logic;						--	SD Card Data 3
SD_CMD:			inout std_logic;						--	SD Card Command Signal
SD_CLK:			out std_logic;							--	SD Card Clock
SD_WP_N:		in std_logic;							--	SD Card Write Protect
														
PS2_KBDAT:		inout std_logic;		 				--	PS2 Data
PS2_KBCLK:		inout std_logic;						--	PS2 Clock
PS2_MSDAT:		inout std_logic;		 				--	PS2 Data
PS2_MSCLK:		inout std_logic;						--	PS2 Clock
														
VGA_HS:			out std_logic;							--	VGA H_SYNC
VGA_VS:			out std_logic;							--	VGA V_SYNC
VGA_R:   		out std_logic_vector(3 downto 0);		--	VGA Red[3:0]
VGA_G:	 		out std_logic_vector(3 downto 0);		--	VGA Green[3:0]
VGA_B:   		out std_logic_vector(3 downto 0);		--	VGA Blue[3:0]
														
GPIO_0:			inout std_logic_vector(31 downto 0);	--	GPIO Connection 0
GPIO_1:			inout std_logic_vector(31 downto 0);	--	GPIO Connection 1
GPIO0_CLKIN:	in std_logic_vector(1 downto 0);		-- GPIO Connection 0 Clock In Bus
GPIO0_CLKOUT:	out std_logic_vector(1 downto 0);		-- GPIO Connection 0 Clock Out Bus
GPIO1_CLKIN:	in std_logic_vector(1 downto 0);		-- GPIO Connection 1 Clock In Bus
GPIO1_CLKOUT:	out std_logic_vector(1 downto 0));		-- GPIO Connection 1 Clock Out Bus

end DE0_Top;

architecture rtl of DE0_Top is
begin

	--------------------------------------------------------------------------------
	-- Note about GPIO Clock pins
	-- GPIO0_CLKOUT:
	-- 	GPIO0_CLKOUT(0) and GPIO1_CLKOUT(0) can be used as Output Pins
	-- 	GPIO0_CLKOUT(1) and GPIO1_CLKOUT(1) does not seem to work, must not be used
	-- 
	-- GPIO1_CLKIN:
	-- 	GPIO0_CLKIN(1 .. 0) and GPIO1_CLKIN(1 .. 0) can be used as Input
	--------------------------------------------------------------------------------
		
	HEX0 <= (others => '0');
	HEX1 <= (others => '0');
	HEX2 <= (others => '0');
	HEX3 <= (others => '0');
	HEX0_DP <= '0';
	HEX1_DP <= '0';
	HEX2_DP <= '0';
	HEX3_DP <= '0';
	
	SD_DAT		<= 'Z';
	DRAM_DQ		<= (others => 'Z');
	FL_DQ			<= (others => 'Z');
	GPIO_0		<= (others => 'Z');
	GPIO_1		<= (others => 'Z');
	GPIO0_CLKOUT<= (others => 'Z');
	GPIO1_CLKOUT<= (others => 'Z');

end rtl;